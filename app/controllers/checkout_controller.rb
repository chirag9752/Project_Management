class CheckoutController < ApplicationController
	skip_before_action :verify_authenticity_token

	def create
		@session = Stripe::Checkout::Session.create({
			payment_method_types: ['card'],
			line_items: [{
				price_data: {
        currency: 'USD',
        product_data: {
          name: params[:data][:productname],
        },
        unit_amount_decimal: params[:data][:price],
      },
      quantity: 1
			}],
			mode: 'payment',
      metadata: {
        user_id: params[:data][:userId]
      },
			success_url: "http://localhost:5173/success?session_id={CHECKOUT_SESSION_ID}",
			cancel_url: "http://localhost:5173/projects/purchase/premium"
		})
		render json: {id: @session.id}
	end

	def webhook_checkout_handle
    payload = request.body.read
    sig_header = request.env['HTTP_STRIPE_SIGNATURE'] # Webhook authentication
    endpoint_secret = ENV["END_POINT_SECRET"]        # Generated by Stripe CLI
  
    begin
      event = Stripe::Webhook.construct_event(payload, sig_header, endpoint_secret)
    rescue JSON::ParserError => e
      render json: { message: "Invalid JSON payload: #{e.message}" }, status: :bad_request and return
    rescue Stripe::SignatureVerificationError => e
      render json: { message: "Signature verification failed: #{e.message}" }, status: :bad_request and return
    end
  
    if event['type'] == 'checkout.session.completed'
      session = event['data']['object']
  
      result = assign_print_pdf(session)
  
      if result[:success]
        render json: {}, status: :ok
      else
        render json: { message: result[:error] }, status: :unprocessable_entity
      end
    else
      render json: { message: "Unhandled event type: #{event['type']}" }, status: :unprocessable_entity
    end
  end
  
  private
  
  def assign_print_pdf(session)
    raise ArgumentError, 'Session is missing' unless session
  
    begin
      ActiveRecord::Base.transaction do
        user = User.find(session.metadata.user_id.to_i)
        raise ActiveRecord::RecordNotFound, 'User not found' unless user
  
        feature = Feature.find_by(feature_name: 'print_pdf')
        raise ActiveRecord::RecordNotFound, 'Feature not found' unless feature
  
        # Assign the feature to the user if not already assigned
        unless user.features.exists?(feature.id)
          user.features << feature
        end
      end
      { success: true }
    rescue ActiveRecord::RecordNotFound => e
      { success: false, error: e.message }
    rescue StandardError => e
      { success: false, error: "Unexpected error: #{e.message}" }
    end
  end  
end
