exit
request.authenticity_token
app
authenticity_token
session
session[:_csrf_token]
params
request.csrf_token
request.content_type
request.body
request.headers
request
exit
sign_in user
let(:user) { create(:user) }
sign_in user
c
@user.projects
@user
exit
Timesheet.find_by(project_user_id: project_user.id)
 project_user.id
 project_user
 project_user = ProjectUser.find_by(project_id: project_id, profile_id: profile_id, user_id: user_id);
project_user
ProjectUser.find_by(project_id: project_id, profile_id: profile_id, user_id: user_id);
Timesheet.find_by(project_user_id: ProjectUser.find_by(project_id: project_id, profile_id: profile_id, user_id: user_id);.id)
Timesheet.find_by(project_user_id: project_user.id)
ProjectUser.find_by(project_id: project_id, profile_id: profile_id, user_id: user_id);
next
exit
Timesheet.find_by(project_user_id: ProjectUser.find_by(project_id: project_id, profile_id: profile_id, user_id: user_id);.id)
Timesheet.find_by(project_user_id: project_user.id)
exit
feature_name.feature_name
feature_name
next
exit
feature_name
prev
back
next
feature_name.feature_name
feature_name
next
exit
FeatureAccessService.has_access?(User.find(params[:featureknown][:userid].to_i), Feature.find_by(feature_name: params[:featureknown][:feature_name]))
back
prev
n
nn
n
next
FeatureAccessService.has_access?(User.find(params[:featureknown][:userid].to_i), Feature.find_by(feature_name: params[:featureknown][:feature_name]))
FeatureAccessService.has_access?(@user, @feature_name)
Feature.find_by(feature_name: params[:featureknown][:feature_name])
 User.find(params[:featureknown][:userid].to_i)
exit
feature_name
exit
exti
next
prev
next
prev
next
prev
back
next
current_user
FeatureAccessService.has_access?(User.find(params[:featureknown][:userid].to_i), Feature.find_by(feature_name: params[:featureknown][:feature_name]))
FeatureAccessService.has_access?(@user, @feature_name)
Feature.find_by(feature_name: params[:featureknown][:feature_name])
params[:featureknown][:feature_name]
params[:featureknown][:userid].to_i
exit
feature_name
FeatureAccessService
feature_name
exit
 UserFeature.exists?(user_id: user.id, feature_id: feature.id)
user.id
user
feature
feature = Feature.find_by(feature_name: feature_name.feature_name);
Feature.find_by(feature_name: feature_name.feature_name).blank?
Feature.find_by(feature_name: feature_name.feature_name)
feature
Feature.find_by(feature_name: feature_name.feature_name)
feature_name.feature_name
feature_name
feature_name.blank?
next
 Feature.find_by(feature_name: params[:featureknown][:feature_name])
params[:featureknown][:feature_name]
current_user
User.find(params[:featureknown][:userid].to_i)
exit
Feature.find_by(feature_name: params[:featureknown][:feature_name])
current_user
User.find(params[:featureknown][:userid].to_i)
params
exit
project_user.timesheets.find_or_initialize_by(week_start_date: week_start_date)
ProjectUser.find_by(project_id: project_id, profile_id: profile_id, user_id: user_id)
exit
@params
params
exit
@params
exit
@params
exit
@params
exit
@params
params
exit
next
next 
next
next 
exit
Profile.create!(profile_name: profile_name)
exit
exi
Profile.create!(profile_name: profile_name)
next
back
Profile.create!(profile_name: profile_name)
user_List_map[user.email]["profile_name"]
exit
profile
profile = Profile.find_by(profile_name: user_List_map[user.email]["profile_name"])
Profile.find_by(profile_name: user_List_map[user.email]["profile_name"])
exit
current_user
exit
User.find(params[:featureknown][:userid].to_i)
current_user
exit
current_user
exit
current_user
params[:featureknown][:userid]
params
exit
exi
Project.includes(:project_users).find_by(id: params[:id]).project_users
Project.includes(:project_users).find_by(id: params[:id]).project_users.map do |project_user| # Map through project_users
            {
              user_id: project_user.user_id,
              billing_access: project_user.billing_access,
              timesheet: project_user.timesheet
            }
          end
Project.includes(:project_users).find_by(id: params[:id]).project_users;
Project.includes(:project_users).find_by(id: params[:id]).project_name
Project.includes(:project_users).find_by(id: params[:id]).id
project.id
Project.includes(:project_users).find_by(id: params[:id]);
exit
@projects.map do |project|
        {
          project_users: project.project_users.map do |project_user|
            {
              user_id: project_user.user_id,
              billing_access: project_user.billing_access,
              timesheet: project_user.timesheet
            }
          end
        }
      end;
@projects.map do |project|
        {
          id: project.id,
          name: project.project_name,
          billing_rate: project.billing_rate,
          project_users: project.project_users.map do |project_user|
            {
              user_id: project_user.user_id,
              billing_access: project_user.billing_access,
              timesheet: project_user.timesheet
            }
          end
        }
      end;
@projects.map do |project|
        {
          id: project.id,
          name: project.project_name,
          billing_rate: project.billing_rate,
          project_users: project.project_users.map do |project_user|
            {
              user_id: project_user.user_id,
              billing_access: project_user.billing_access,
              timesheet: project_user.timesheet
            }end
@projects.map do |project|
        {
          id: project.id,
          name: project.project_name,
          billing_rate: project.billing_rate,
          project_users: project.project_users.map do |project_user|
            {
              user_id: project_user.user_id,
              billing_access: project_user.billing_access,
              timesheet: project_user.timesheet
            }
Project.includes(:project_users).project_users;
@projects.project_users;
 @projects = Project.includes(:project_users);
Project.includes(:project_users);
exit
extract_project_params[:user_List]
extract_project_params[:user_List].index_by { |user| user["email"] }
extract_project_params[:user_List].map { |user| user["email"] }
extract_project_params[:user_List]
Project.new(extract_project_params.except(:user_List))
Project.new(project_params.except(:user_List))
extract_project_params
exit
@params
params
exit
Project.new(project_params.except(:user_ids));
User.where(id: user_ids);
exit
params[:featureknown]
params[:featureknown][:userid];
params
exit
@user.features
exit
FEATURES_CONFIG[feature_name].constantize.new(params.permit(*service_class.required_params))
FEATURES_CONFIG[feature_name].constantize.new(params.permit(*FEATURES_CONFIG[feature_name].constantize.required_params))
validate_params(FEATURES_CONFIG[feature_name].constantize)
FEATURES_CONFIG[feature_name].constantize
FEATURES_CONFIG[feature_name]
service_class_name.constantize
validate_params(service_class)
FEATURES_CONFIG[feature_name]
params[:featureknown][:feature_name]
FFEATURES_CONFIG[feature_name]
exit
current_user
params[:featureknown][:userid].to_i
params
exit
exot
params[:featureknown]
params
params[:featureknown][:userid]
params[:featureknown][:userid];
prev
params[:project]
